{
  "type": "object",
  "description": "Triggered when an error occurred.",
  "properties": {
    "eventName": {
      "enum": ["Error"]
    },
    "domain": {
      "type": "string",
      "enum": [
        "E2EE",
        "VOIP",
        "TO_DEVICE"
      ]
    },
    "name": {
      "type": "string",
      "oneOf": [
        {"const": "OlmIndexError", "description": "E2E domain error. The room key is known but is ratcheted (index > 0)."},
        {"const": "OlmKeysNotSentError", "description": "E2E domain error. Generic unknown inbound group session error."},
        {"const": "OlmUnspecifiedError", "description": "E2E domain error. Any other decryption error (missing field, format errors...)."},
        {"const": "UnknownError", "description": "E2E domain error. Decryption fails due to unknown error."},
        {"const": "HistoricalMessage", "description": "E2E domain error. Decryption fails for historical message and there is no backup."},
        {"const": "VoipUserHangup", "description": "VOIP domain error. The user hung up the call."},
        {"const": "VoipIceFailed", "description": "VOIP domain error. ICE negotiation failed."},
        {"const": "VoipInviteTimeout", "description": "VOIP domain error. The call invite timed out."},
        {"const": "VoipIceTimeout", "description": "VOIP domain error. ICE negotiation timed out."},
        {"const": "VoipUserMediaFailed", "description": "VOIP domain error. The user's media failed to start."},
        {"const": "ToDeviceFailedToDecrypt", "description": "TO_DEVICE domain error. The to-device message failed to decrypt."}
      ]
    },
    "context": {
      "description": "Context - client defined, can be used for debugging.",
      "type": "string"
    },
    "timeToDecryptMillis": {
      "description": "UTDs can be permanent or temporary. If temporary, this field will contain the time it took to decrypt the message in milliseconds. If permanent should be -1",
      "type": "integer"
    },
    "cryptoSDK": {
      "description": "Which crypto backend is the client currently using.",
      "type": "string",
      "oneOf": [
        {"const": "Legacy", "description": "Legacy crypto backend specific to each platform."},
        {"const": "Rust", "description": "Cross-platform crypto backend written in Rust."}
      ]
    },
    "cryptoModule": {
      "description": "DEPRECATED: Which crypto module is the client currently using.",
      "type": "string",
      "oneOf": [
        {"const": "Native", "description": "Native / legacy crypto module specific to each platform."},
        {"const": "Rust", "description": "Shared / cross-platform crypto module written in Rust."}
      ]
    }
  },
  "required": ["domain", "name", "eventName"],
  "additionalProperties": false
}
