{
  "type": "object",
  "description": "Triggered when an error occurred.",
  "properties": {
    "eventName": {
      "enum": ["Error"]
    },
    "domain": {
      "type": "string",
      "enum": [
        "E2EE",
        "VOIP",
        "TO_DEVICE"
      ]
    },
    "name": {
      "type": "string",
      "oneOf": [
        {"const": "OlmIndexError", "description": "E2EE domain error. The room key is known but is ratcheted (index > 0)."},
        {"const": "OlmKeysNotSentError", "description": "E2EE domain error. Generic unknown inbound group session error."},
        {"const": "OlmUnspecifiedError", "description": "E2EE domain error. Any other decryption error (missing field, format errors...)."},
        {"const": "UnknownError", "description": "E2EE domain error. Decryption failed due to unknown error."},
        {"const": "HistoricalMessage", "description": "E2EE domain error. Decryption failed for a message sent before the device logged in, and key backup is not enabled."},
        {"const": "ExpectedDueToMembership", "description": "E2EE domain error. Decryption failed for a message sent before you were in the room (shared history visibility and support for sharing past keys is not available/supported)."},
        {"const": "ExpectedSentByInsecureDevice", "description": "E2EE domain error. Decryption failed for a message because it was sent by an insecure device"},
        {"const": "ExpectedVerificationViolation", "description": "E2EE domain error. Decryption failed for a message because the sender's verified identity has changed."},
        {"const": "RoomKeysWithheldForUnverifiedDevice", "description": "E2EE domain error. The sender withheld the keys for this message, due to the recipient device being unverified."},
        {"const": "VoipUserHangup", "description": "VOIP domain error. The user hung up the call."},
        {"const": "VoipIceFailed", "description": "VOIP domain error. ICE negotiation failed."},
        {"const": "VoipInviteTimeout", "description": "VOIP domain error. The call invite timed out."},
        {"const": "VoipIceTimeout", "description": "VOIP domain error. ICE negotiation timed out."},
        {"const": "VoipUserMediaFailed", "description": "VOIP domain error. The user's media failed to start."},
        {"const": "ToDeviceFailedToDecrypt", "description": "TO_DEVICE domain error. The to-device message failed to decrypt."}
      ]
    },
    "context": {
      "description": "Context - client defined, can be used for debugging.",
      "type": "string"
    },
    "timeToDecryptMillis": {
      "description": "UTDs can be permanent or temporary. If temporary, this field will contain the time it took to decrypt the message in milliseconds. If permanent should be -1.",
      "type": "integer"
    },
    "cryptoSDK": {
      "description": "Which crypto backend is the client currently using.",
      "type": "string",
      "oneOf": [
        {"const": "Legacy", "description": "Legacy crypto backend specific to each platform."},
        {"const": "Rust", "description": "Cross-platform crypto backend written in Rust."}
      ]
    },
    "cryptoModule": {
      "description": "DEPRECATED: Which crypto module is the client currently using.",
      "type": "string",
      "oneOf": [
        {"const": "Native", "description": "Native / legacy crypto module specific to each platform."},
        {"const": "Rust", "description": "Shared / cross-platform crypto module written in Rust."}
      ]
    },
    "eventLocalAgeMillis": {
      "description": "An heuristic based on event origin_server_ts and the current device creation time (origin_server_ts - device_ts). This would be used to get the source of the event scroll-back/live/initialSync.",
      "type": "integer"
    },
    "userTrustsOwnIdentity": {
      "description": "true if the current user trusts their own identity (verified session) at time of decryption.",
      "type": "boolean"
    },
    "isMatrixDotOrg": {
      "description": "true if the current user is using matrix.org.",
      "type": "boolean"
    },
    "isFederated": {
      "description": "true if userDomain != senderDomain.",
      "type": "boolean"
    },
    "wasVisibleToUser": {
      "description": "true if that unable to decrypt error was visible to the user.",
      "type": "boolean"
    }
  },
  "required": ["domain", "name", "eventName"],
  "additionalProperties": false
}
